{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n/**\r\n * validity 체크하는 hook\r\n * @param {\"email\" || \"password\"} type\r\n * @returns\r\n */\n\nconst useValidate = type => {\n  _s();\n\n  const [validity, setValidity] = useState(false);\n  const [warnList, setWarnList] = useState([]);\n\n  const oncheckValidity = text => {\n    const warnList = [];\n\n    if (!text) {\n      return setValidity(false);\n    }\n\n    const regexforValAuth = {\n      email: {\n        warnText: `'@'가 포함된 올바른 이메일을 입력해주세요.`,\n        fn: new RegExp(\"@\")\n      },\n      password: {\n        warnText: `8글자 이상의 비밀번호를 입력해주세요.`,\n        fn: new RegExp(\"(?=.{8,})\")\n      }\n    };\n    const {\n      warnText,\n      fn\n    } = regexforValAuth[type];\n\n    if (!fn.test(text)) {\n      warnList.push(warnText);\n    }\n\n    setWarnList(warnList);\n\n    if (warnList.length > 0) {\n      setValidity(false);\n    } else {\n      setValidity(true);\n    }\n  };\n\n  return [validity, warnList, oncheckValidity];\n};\n\n_s(useValidate, \"FgQsjnx1NoV828+KracV+MzXAzY=\");\n\nexport default useValidate;","map":{"version":3,"names":["useState","useValidate","type","validity","setValidity","warnList","setWarnList","oncheckValidity","text","regexforValAuth","email","warnText","fn","RegExp","password","test","push","length"],"sources":["C:/Users/lnr99/Documents/wanted-pre-onboarding-frontend/src/hooks/useValidate.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\n/**\r\n * validity 체크하는 hook\r\n * @param {\"email\" || \"password\"} type\r\n * @returns\r\n */\r\nconst useValidate = (type) => {\r\n  const [validity, setValidity] = useState(false);\r\n  const [warnList, setWarnList] = useState([]);\r\n\r\n  const oncheckValidity = (text) => {\r\n    const warnList = [];\r\n    if (!text) {\r\n      return setValidity(false);\r\n    }\r\n    const regexforValAuth = {\r\n      email: {\r\n        warnText: `'@'가 포함된 올바른 이메일을 입력해주세요.`,\r\n        fn: new RegExp(\"@\"),\r\n      },\r\n      password: {\r\n        warnText:`8글자 이상의 비밀번호를 입력해주세요.`,\r\n        fn: new RegExp(\"(?=.{8,})\"),\r\n      },\r\n    };\r\n    const { warnText, fn } = regexforValAuth[type];\r\n    if (!fn.test(text)) {\r\n      warnList.push(warnText);\r\n    }\r\n\r\n    setWarnList(warnList);\r\n    if (warnList.length > 0) {\r\n      setValidity(false);\r\n    } else {\r\n      setValidity(true);\r\n    }\r\n  };\r\n  return [validity, warnList, oncheckValidity];\r\n};\r\n\r\nexport default useValidate;\r\n"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAIC,IAAD,IAAU;EAAA;;EAC5B,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;;EAEA,MAAMO,eAAe,GAAIC,IAAD,IAAU;IAChC,MAAMH,QAAQ,GAAG,EAAjB;;IACA,IAAI,CAACG,IAAL,EAAW;MACT,OAAOJ,WAAW,CAAC,KAAD,CAAlB;IACD;;IACD,MAAMK,eAAe,GAAG;MACtBC,KAAK,EAAE;QACLC,QAAQ,EAAG,2BADN;QAELC,EAAE,EAAE,IAAIC,MAAJ,CAAW,GAAX;MAFC,CADe;MAKtBC,QAAQ,EAAE;QACRH,QAAQ,EAAE,uBADF;QAERC,EAAE,EAAE,IAAIC,MAAJ,CAAW,WAAX;MAFI;IALY,CAAxB;IAUA,MAAM;MAAEF,QAAF;MAAYC;IAAZ,IAAmBH,eAAe,CAACP,IAAD,CAAxC;;IACA,IAAI,CAACU,EAAE,CAACG,IAAH,CAAQP,IAAR,CAAL,EAAoB;MAClBH,QAAQ,CAACW,IAAT,CAAcL,QAAd;IACD;;IAEDL,WAAW,CAACD,QAAD,CAAX;;IACA,IAAIA,QAAQ,CAACY,MAAT,GAAkB,CAAtB,EAAyB;MACvBb,WAAW,CAAC,KAAD,CAAX;IACD,CAFD,MAEO;MACLA,WAAW,CAAC,IAAD,CAAX;IACD;EACF,CA1BD;;EA2BA,OAAO,CAACD,QAAD,EAAWE,QAAX,EAAqBE,eAArB,CAAP;AACD,CAhCD;;GAAMN,W;;AAkCN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}