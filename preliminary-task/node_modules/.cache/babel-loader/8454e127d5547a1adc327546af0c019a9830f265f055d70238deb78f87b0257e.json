{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\n\n/**\r\n * validity 체크하는 hook\r\n * @param {\"email\" || \"password\"} type\r\n * @returns\r\n */\nconst useValidate = type => {\n  _s();\n  const [validity, setValidity] = useState(false);\n  const [warnList, setWarnList] = useState([]);\n  const oncheckValidity = text => {\n    const warnList = [];\n    if (!text) {\n      return setValidity(false);\n    }\n    const regexforValAuth = {\n      email: {\n        warnText: `'@'가 포함된 올바른 이메일을 입력해주세요.`,\n        fn: new RegExp(\"@\")\n      },\n      password: {\n        warnText: `8글자 이상의 비밀번호를 입력해주세요.`,\n        fn: new RegExp(\"(?=.{8,})\")\n      }\n    };\n    const {\n      warnText,\n      fn\n    } = regexforValAuth[type];\n    if (!fn.test(text)) {\n      warnList.push(warnText);\n    }\n    setWarnList(warnList);\n    if (warnList.length > 0) {\n      setValidity(false);\n    } else {\n      setValidity(true);\n    }\n  };\n  return [validity, warnList, oncheckValidity];\n};\n_s(useValidate, \"FgQsjnx1NoV828+KracV+MzXAzY=\");\nexport default useValidate;","map":{"version":3,"names":["useState","useValidate","type","_s","validity","setValidity","warnList","setWarnList","oncheckValidity","text","regexforValAuth","email","warnText","fn","RegExp","password","test","push","length"],"sources":["/Users/naryeong/Documents/wanted-pre-onboarding-frontend/preliminary-task/src/hooks/useValidate.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\n/**\r\n * validity 체크하는 hook\r\n * @param {\"email\" || \"password\"} type\r\n * @returns\r\n */\r\nconst useValidate = (type) => {\r\n  const [validity, setValidity] = useState(false);\r\n  const [warnList, setWarnList] = useState([]);\r\n\r\n  const oncheckValidity = (text) => {\r\n    const warnList = [];\r\n    if (!text) {\r\n      return setValidity(false);\r\n    }\r\n    const regexforValAuth = {\r\n      email: {\r\n        warnText: `'@'가 포함된 올바른 이메일을 입력해주세요.`,\r\n        fn: new RegExp(\"@\"),\r\n      },\r\n      password: {\r\n        warnText:`8글자 이상의 비밀번호를 입력해주세요.`,\r\n        fn: new RegExp(\"(?=.{8,})\"),\r\n      },\r\n    };\r\n    const { warnText, fn } = regexforValAuth[type];\r\n    if (!fn.test(text)) {\r\n      warnList.push(warnText);\r\n    }\r\n\r\n    setWarnList(warnList);\r\n    if (warnList.length > 0) {\r\n      setValidity(false);\r\n    } else {\r\n      setValidity(true);\r\n    }\r\n  };\r\n  return [validity, warnList, oncheckValidity];\r\n};\r\n\r\nexport default useValidate;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAIC,IAAI,IAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMQ,eAAe,GAAIC,IAAI,IAAK;IAChC,MAAMH,QAAQ,GAAG,EAAE;IACnB,IAAI,CAACG,IAAI,EAAE;MACT,OAAOJ,WAAW,CAAC,KAAK,CAAC;IAC3B;IACA,MAAMK,eAAe,GAAG;MACtBC,KAAK,EAAE;QACLC,QAAQ,EAAG,2BAA0B;QACrCC,EAAE,EAAE,IAAIC,MAAM,CAAC,GAAG;MACpB,CAAC;MACDC,QAAQ,EAAE;QACRH,QAAQ,EAAE,uBAAsB;QAChCC,EAAE,EAAE,IAAIC,MAAM,CAAC,WAAW;MAC5B;IACF,CAAC;IACD,MAAM;MAAEF,QAAQ;MAAEC;IAAG,CAAC,GAAGH,eAAe,CAACR,IAAI,CAAC;IAC9C,IAAI,CAACW,EAAE,CAACG,IAAI,CAACP,IAAI,CAAC,EAAE;MAClBH,QAAQ,CAACW,IAAI,CAACL,QAAQ,CAAC;IACzB;IAEAL,WAAW,CAACD,QAAQ,CAAC;IACrB,IAAIA,QAAQ,CAACY,MAAM,GAAG,CAAC,EAAE;MACvBb,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,MAAM;MACLA,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;EACD,OAAO,CAACD,QAAQ,EAAEE,QAAQ,EAAEE,eAAe,CAAC;AAC9C,CAAC;AAACL,EAAA,CAhCIF,WAAW;AAkCjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}